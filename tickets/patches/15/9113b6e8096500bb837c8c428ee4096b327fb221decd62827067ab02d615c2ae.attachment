--- resize.c.orig	Sun Nov 16 15:48:08 2008
+++ resize.c	Fri May 15 10:31:50 2009
@@ -912,7 +912,11 @@
               register long
                 i;
 
+              double
+                transparency_coeff, normalize;
+
               pixel=zero;
+              normalize=0;
               if ((destination->matte) || (destination->colorspace == CMYKColorspace))
                 {
                   for (i=0; i < n; i++)
@@ -920,14 +924,17 @@
                       j=y*(contribution[n-1].pixel-contribution[0].pixel+1)+
                         (contribution[i].pixel-contribution[0].pixel);
                       weight=contribution[i].weight;
-                      pixel.red+=weight*p[j].red;
-                      pixel.green+=weight*p[j].green;
-                      pixel.blue+=weight*p[j].blue;
+                      transparency_coeff = weight * (1 - ((double) p[j].opacity/TransparentOpacity));
+                      pixel.red+=transparency_coeff*p[j].red;
+                      pixel.green+=transparency_coeff*p[j].green;
+                      pixel.blue+=transparency_coeff*p[j].blue;
                       pixel.opacity+=weight*p[j].opacity;
+                      normalize += transparency_coeff;
                     }
-                  q[y].red=RoundDoubleToQuantum(pixel.red);
-                  q[y].green=RoundDoubleToQuantum(pixel.green);
-                  q[y].blue=RoundDoubleToQuantum(pixel.blue);
+                  normalize = 1.0 / (fabs((double) normalize) <= MagickEpsilon ? 1.0 : normalize);
+                  q[y].red=RoundDoubleToQuantum(normalize*pixel.red);
+                  q[y].green=RoundDoubleToQuantum(normalize*pixel.green);
+                  q[y].blue=RoundDoubleToQuantum(normalize*pixel.blue);
                   q[y].opacity=RoundDoubleToQuantum(pixel.opacity);
                 }
               else
@@ -1109,8 +1116,12 @@
 
               register long
                 i;
+                
+              double
+                transparency_coeff, normalize;
 
               pixel=zero;
+              normalize=0;
               if ((source->matte) || (source->colorspace == CMYKColorspace))
                 {
                   for (i=0; i < n; i++)
@@ -1118,14 +1129,18 @@
                       j=(long) ((contribution[i].pixel-contribution[0].pixel)*
                                 source->columns+x);
                       weight=contribution[i].weight;
-                      pixel.red+=weight*p[j].red;
-                      pixel.green+=weight*p[j].green;
-                      pixel.blue+=weight*p[j].blue;
+                      transparency_coeff = weight * (1 - ((double) p[j].opacity/TransparentOpacity));
+                      pixel.red+=transparency_coeff*p[j].red;
+                      pixel.green+=transparency_coeff*p[j].green;
+                      pixel.blue+=transparency_coeff*p[j].blue;
                       pixel.opacity+=weight*p[j].opacity;
+                      normalize += transparency_coeff;
                     }
-                  q[x].red=RoundDoubleToQuantum(pixel.red);
-                  q[x].green=RoundDoubleToQuantum(pixel.green);
-                  q[x].blue=RoundDoubleToQuantum(pixel.blue);
+
+                  normalize = 1.0 / (fabs((double) normalize) <= MagickEpsilon ? 1.0 : normalize);
+                  q[x].red=RoundDoubleToQuantum(normalize*pixel.red);
+                  q[x].green=RoundDoubleToQuantum(normalize*pixel.green);
+                  q[x].blue=RoundDoubleToQuantum(normalize*pixel.blue);
                   q[x].opacity=RoundDoubleToQuantum(pixel.opacity);
                 }
               else
