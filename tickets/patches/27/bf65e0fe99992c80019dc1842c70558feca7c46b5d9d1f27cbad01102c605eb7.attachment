--- GraphicsMagick-1.3.15.orig/magick/effect.c	2012-04-28 15:45:16.000000000 -0400
+++ GraphicsMagick-1.3.15/magick/effect.c	2012-09-03 10:47:03.000000000 -0400
@@ -31,7 +31,7 @@
 %
 %
 */
-
+
 /*
   Include declarations.
 */
@@ -54,7 +54,7 @@
 #include "magick/render.h"
 #include "magick/shear.h"
 #include "magick/utility.h"
-
+
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
@@ -91,6 +91,9 @@
 %
 */
 #define AdaptiveThresholdImageText "[%s] Adaptive threshold..."
+/* Macros for accessing dynamic preprocess buffer */
+#define PRE(X,Y) ((Y + height + 2) % (height + 2)) * (image->columns + (width << 1)) + X
+
 MagickExport Image *AdaptiveThresholdImage(const Image *image,
                                            const unsigned long width,
                                            const unsigned long height,
@@ -98,210 +101,305 @@
                                            ExceptionInfo *exception)
 {
 
-  Image
-    *threshold_image;
+  Image *threshold_image;
 
-  long
-    y;
+  MagickPassFail status;
 
-  MagickPassFail
-    status;
+  unsigned long local_area = width * height;
+  unsigned long int i;
 
-  const MagickBool
-    is_monochrome = image->is_monochrome,
+  const MagickBool is_monochrome = image->is_monochrome,
     is_grayscale = image->is_grayscale;
-
+  
   /*
     Initialize thresholded image attributes.
-  */
+   */
   assert(image != (const Image *) NULL);
   assert(image->signature == MagickSignature);
   assert(exception != (ExceptionInfo *) NULL);
   assert(exception->signature == MagickSignature);
   if ((image->columns < width) || (image->rows < height))
-    ThrowImageException3(OptionError,UnableToThresholdImage,
+    ThrowImageException3(OptionError, UnableToThresholdImage,
                          ImageSmallerThanRadius);
-  if (width*height > (unsigned long) ULONG_MAX/ScaleQuantumToMap(MaxRGB))
-    {
-      ThrowImageException3(OptionError,UnableToThresholdImage,
-			   RegionAreaExceedsLimit);
-    }
-  threshold_image=CloneImage(image,0,0,True,exception);
+  if (local_area > (unsigned long) ULONG_MAX / ScaleQuantumToMap(MaxRGB))
+  {
+    ThrowImageException3(OptionError, UnableToThresholdImage,
+                         RegionAreaExceedsLimit);
+  }
+
+  threshold_image = CloneImage(image, 0, 0, True, exception);
   if (threshold_image == (Image *) NULL)
-    return((Image *) NULL);
+    return ((Image *) NULL);
   if (is_monochrome)
     return threshold_image;
-  (void) SetImageType(threshold_image,TrueColorType);
-  status=MagickPass;
+  (void) SetImageType(threshold_image, TrueColorType);
+  status = MagickPass;
+
   /*
     Adaptive threshold image.
-  */
+   */
   {
-    unsigned long
-      row_count=0;
+    unsigned long half_width = width / 2;
+    unsigned long half_height = height / 2;
+
+    /* calculate after which row that overflow of window sum may happen in pre-processing
+       so we can avoid overflow only after processing that row... */
+    const unsigned long overflow_row = (((unsigned long)~0 >> (QuantumDepth + 1)) / (image->columns + (width << 1)) - height);
+
+    unsigned long x, y;
+
+    LongPixelPacket * dyn_process;
+
+    /* alocates pre processing buffer, 
+          (window height + 2) * (image width + 2 * width), filled with zero */
+    unsigned long dyn_process_size = (height + 2) * (image->columns + (width << 1));
+    dyn_process = calloc(dyn_process_size, sizeof (LongPixelPacket));
+
+    unsigned long row_count = 0;
 
     const LongPixelPacket
-      long_zero = { 0, 0, 0, 0 };
+    long_zero = {0, 0, 0, 0};
 
     const MagickBool
-      matte=((threshold_image->matte) || (threshold_image->colorspace == CMYKColorspace));
+    matte = ((threshold_image->matte) || (threshold_image->colorspace == CMYKColorspace));
 
-    const long
-      long_offset = offset + 0.5;
+    const long long_offset = offset + 0.5;
 
-    const unsigned long
-      dimensions = width*height;
+    const PixelPacket * restrict p = (const PixelPacket *) NULL;
+    MagickBool thread_status = MagickPass;
 
-#if defined(HAVE_OPENMP)
-#  if defined(TUNE_OPENMP)
-#    pragma omp parallel for schedule(runtime) shared(row_count, status)
-#  else
-#    if defined(USE_STATIC_SCHEDULING_ONLY)
-#      pragma omp parallel for schedule(static) shared(row_count, status)
-#    else
-#      pragma omp parallel for schedule(guided) shared(row_count, status)
-#    endif
-#  endif
-#endif
-    for (y=0; y < (long) image->rows; y++)
+    for (y = 0; y < image->rows + half_height + height + 1; y++)
+    {
+      thread_status = status;
+      
+      if (thread_status == MagickFail)
+        continue;
+
+      /* for each window height + 2 rows, redefine reading area for preprocess
+         and avoid sum overflow */
+      if (PRE(0,y) == 0)
       {
-        const PixelPacket
-          * restrict p;
+        p = AcquireImagePixels(image, -(long)width, (long)y - (long)height,
+                               image->columns + (width << 1), height + 2, exception);
 
-        PixelPacket
-          * restrict q;
+        /* this is the code for sum overflow avoidance in preprocessing
+           it's only used for really large images.
+           and it can be highly optimized.
+           I couldn't properly test it this code... */
+        if (y > overflow_row)
+        {
+          LongPixelPacket min_sum;
+          min_sum.red = dyn_process[0].red;
+          min_sum.green = dyn_process[0].green;
+          min_sum.blue = dyn_process[0].blue;
+          min_sum.opacity = dyn_process[0].opacity;
 
-        long
-          x;
+          for(i = 0; i < dyn_process_size; i++)
+          {
+            dyn_process[i].red -= min_sum.red;
+            dyn_process[i].green -= min_sum.green;
+            dyn_process[i].blue -= min_sum.blue;
+            dyn_process[i].opacity -= min_sum.opacity;
+          }
+        }
+      }
+      
+      if ((p == (const PixelPacket *) NULL))
+        thread_status = MagickFail;
 
-        MagickBool
-          thread_status;
-
-#if defined(HAVE_OPENMP)
-#  pragma omp critical (GM_AdaptiveThresholdImage)
-#endif
-        thread_status=status;
-        if (thread_status == MagickFail)
-          continue;
+      if (thread_status != MagickFail)
+      {
 
-        p=AcquireImagePixels(image,-(long) width/2,y-height/2,
-                             image->columns+width,height,exception);
-        q=SetImagePixelsEx(threshold_image,0,y,threshold_image->columns,1,exception);
-        if ((p == (const PixelPacket *) NULL) || (q == (PixelPacket *) NULL))
-          thread_status=MagickFail;
+        /* load line for writing */
+        PixelPacket * restrict q = ((PixelPacket *) NULL);
 
-        if (thread_status != MagickFail)
-          {
-	    for (x=0; x < (long) image->columns; x++)
-	      {
-		LongPixelPacket
-		  long_sum;
-
-		const PixelPacket
-		  * restrict r;
-
-		unsigned long
-		  u,
-		  v;
-
-		r=p;
-		long_sum=long_zero;
-
-		if (is_grayscale && !matte)
-		  {
-		    /* G */
-		    for (v=0; v < height; v++)
-		      {
-			for (u=0; u < width; u++)
-			  long_sum.red += ScaleQuantumToMap(r[u].red);
-			r+=image->columns+width;
-		      }
-		  }
-		else if (!matte)
-		  {
-		    /* RGB */
-		    for (v=0; v < height; v++)
-		      {
-			for (u=0; u < width; u++)
-			  {
-			    long_sum.red += ScaleQuantumToMap(r[u].red);
-			    long_sum.green += ScaleQuantumToMap(r[u].green);
-			    long_sum.blue += ScaleQuantumToMap(r[u].blue);
-			  }
-			r+=image->columns+width;
-		      }
-		  }
-		else
-		  {
-		    /* RGBA */
-		    for (v=0; v < height; v++)
-		      {
-			for (u=0; u < width; u++)
-			  {
-			    long_sum.red += ScaleQuantumToMap(r[u].red);
-			    long_sum.green += ScaleQuantumToMap(r[u].green);
-			    long_sum.blue += ScaleQuantumToMap(r[u].blue);
-			    long_sum.opacity += ScaleQuantumToMap(r[u].opacity);
-			  }
-			r+=image->columns+width;
-		      }
-		  }
-
-		long_sum.red = ScaleMapToQuantum(((long) long_sum.red/dimensions))+long_offset;
-		if (!is_grayscale)
-		  {
-		    long_sum.green = ScaleMapToQuantum(((long) long_sum.green/dimensions))+long_offset;
-		    long_sum.blue = ScaleMapToQuantum(((long) long_sum.blue/dimensions))+long_offset;
-		  }
-		if (matte)
-		  long_sum.opacity = ScaleMapToQuantum(((long) long_sum.opacity/dimensions))+long_offset;
-
-		if (is_grayscale)
-		  {
-		    q->red=q->green=q->blue=(q->red <= long_sum.red ? 0 : MaxRGB);
-		  }
-		else
-		  {
-		    q->red=(q->red <= long_sum.red ? 0 : MaxRGB);
-		    q->green=(q->green <= long_sum.green ? 0 : MaxRGB);
-		    q->blue=(q->blue <= long_sum.blue ? 0 : MaxRGB);
-		  }
-		if (matte)
-		  q->opacity=(q->opacity <= long_sum.opacity ? 0 : MaxRGB);
-		p++;
-		q++;
-	      }
-            if (!SyncImagePixelsEx(threshold_image,exception))
-              thread_status=MagickFail;
+        if (y > half_height + height)
+        {
+          q = SetImagePixelsEx(threshold_image, 0, y - half_height - height - 1,
+                                    threshold_image->columns, 1, exception);
+
+          if ((q == (PixelPacket *) NULL)) {
+            thread_status = MagickFail;
+            break;
           }
-#if defined(HAVE_OPENMP)
-#  pragma omp critical (GM_AdaptiveThresholdImage)
-#endif
+        }
+
+        for (x = 2; x < image->columns + (width << 1); x++)
         {
-          row_count++;
-          if (QuantumTick(row_count,image->rows))
-            if (!MagickMonitorFormatted(row_count,image->rows,exception,
-                                        AdaptiveThresholdImageText,
-                                        image->filename))
-              thread_status=MagickFail;
-          
-          if (thread_status == MagickFail)
-            status=MagickFail;
+          LongPixelPacket * current_pre;
+
+          /* preprocess (x,y) */
+          current_pre = &dyn_process[PRE(x, y)];
+            
+
+          current_pre->red = ScaleQuantumToMap(p[PRE(x, y)].red);
+          current_pre->red += dyn_process[PRE(x, y - 1)].red;
+
+          current_pre->red += dyn_process[PRE(x - 1, y)].red;
+          current_pre->red -= dyn_process[PRE(x - 1, y - 1)].red;
+
+          if(!is_grayscale)
+          {
+            /* green */
+            current_pre->green = ScaleQuantumToMap(p[PRE(x, y)].green);
+            current_pre->green += dyn_process[PRE(x, y - 1)].green;
+
+            current_pre->green += dyn_process[PRE(x - 1, y)].green;
+            current_pre->green -= dyn_process[PRE(x - 1, y - 1)].green;
+
+            /* blue */
+            current_pre->blue = ScaleQuantumToMap(p[PRE(x, y)].blue);
+            current_pre->blue += dyn_process[PRE(x, y - 1)].blue;
+
+            current_pre->blue += dyn_process[PRE(x - 1, y)].blue;
+            current_pre->blue -= dyn_process[PRE(x - 1, y - 1)].blue;
+          }
+          if(matte)
+          {
+            /* opacity */
+            current_pre->opacity = ScaleQuantumToMap(p[PRE(x, y)].opacity);
+            current_pre->opacity += dyn_process[PRE(x, y - 1)].opacity;
+
+            current_pre->opacity += dyn_process[PRE(x - 1, y)].opacity;
+            current_pre->opacity -= dyn_process[PRE(x - 1, y - 1)].opacity;
+          }
+          /* END preprocess for (x,y) */
+
+          /* start computing threshold mean, with the pre-computed data
+             and only for pixels inside valid domain */
+          if (y > half_height + height
+              && x >= width && x < image->columns + width)
+          {
+            /* Left, Right, Upper, Bottom coord. to calculate the window's sum */
+            long L, R, U, B;
+
+            L = x - half_width - (width & 1); /*  if is odd, subtract 1... */
+            R = x + half_width;
+            U = y - height - 1;
+            B = y - 1;
+
+
+            LongPixelPacket long_sum;
+            long_sum = long_zero;
+
+            if(L>=0)
+            {
+              long_sum.red += dyn_process[PRE(L,U)].red;
+              long_sum.red -= dyn_process[PRE(L,B)].red;
+            }
+
+            long_sum.red += dyn_process[PRE(R,B)].red;
+            long_sum.red -= dyn_process[PRE(R,U)].red;
+            if(!is_grayscale)
+            {
+              if(L>=0)
+              {
+                long_sum.green += dyn_process[PRE(L,U)].green;
+                long_sum.green -= dyn_process[PRE(L,B)].green;
+                long_sum.blue += dyn_process[PRE(L,U)].blue;
+                long_sum.blue -= dyn_process[PRE(L,B)].blue;
+              }
+
+              long_sum.green += dyn_process[PRE(R,B)].green;
+              long_sum.green -= dyn_process[PRE(R,U)].green;
+              long_sum.blue += dyn_process[PRE(R,B)].blue;
+              long_sum.blue -= dyn_process[PRE(R,U)].blue;
+            }
+            if(matte)
+            {
+              if(L>=0)
+              {
+                long_sum.opacity += dyn_process[PRE(L,U)].opacity;
+                long_sum.opacity -= dyn_process[PRE(L,B)].opacity;
+              }
+
+              long_sum.opacity += dyn_process[PRE(R,B)].opacity;
+              long_sum.opacity -= dyn_process[PRE(R,U)].opacity;
+            }
+
+            /* Avoid overflow at mean.
+               we were able to do this by using some bitwise operations
+               but there was no speedup and the code get pretty hard to read. */
+            long_sum.red = ScaleMapToQuantum((long)(long_sum.red / local_area)) + long_offset;
+            
+            if((long)long_sum.red > (long)MaxRGB)
+              long_sum.red = MaxRGB;
+            else if((long)long_sum.red < (long)0)
+              long_sum.red = 0;
+            
+            q[x - width].red = (q[x - width].red <= long_sum.red ? 0 : MaxRGB);
+
+            if(! is_grayscale)
+            {
+              long_sum.green = ScaleMapToQuantum((long)(long_sum.green / local_area)) + long_offset;
+
+              if((long)long_sum.green > (long)MaxRGB)
+                long_sum.green = MaxRGB;
+              else if((long)long_sum.green < (long)0)
+                long_sum.green = 0;
+
+              long_sum.blue = ScaleMapToQuantum((long)(long_sum.blue / local_area)) + long_offset;
+
+              if((long)long_sum.blue > (long)MaxRGB)
+                long_sum.blue = MaxRGB;
+              else if((long)long_sum.blue < (long)0)
+                long_sum.blue = 0;
+
+              q[x - width].green = (q[x - width].green <= long_sum.green ? 0 : MaxRGB);
+              q[x - width].blue = (q[x - width].blue <= long_sum.blue ? 0 : MaxRGB);
+
+            }
+            if (matte)
+            {
+              long_sum.opacity = ScaleMapToQuantum((long)(long_sum.opacity / local_area)) + long_offset;
+
+              if((long)long_sum.opacity > (long)MaxRGB)
+                long_sum.opacity = MaxRGB;
+              else if((long)long_sum.opacity < (long)0)
+                long_sum.opacity = 0;
+
+              q[x - width].opacity = (q[x - width].opacity <= long_sum.opacity ? 0 : MaxRGB);
+            }
+
+
+            if(is_grayscale) 
+              q[x - width].green = q[x - width].blue = q[x - width].red;
+          }
+
         }
       }
+      {
+         row_count++;
+         if (QuantumTick(row_count, image->rows))
+           if (!MagickMonitorFormatted(row_count, image->rows, exception,
+                                       AdaptiveThresholdImageText,
+                                       image->filename))
+             thread_status = MagickFail;
+
+       
+        if (thread_status == MagickFail)
+          status = MagickFail;
+      }
+    }
+
+    if (!SyncImagePixelsEx(threshold_image, exception))
+          thread_status = MagickFail;
+
+      free(dyn_process);
   }
   if (MagickFail == status)
-    {
-      DestroyImage(threshold_image);
-      threshold_image=(Image *) NULL;
-    }
+  {
+    DestroyImage(threshold_image);
+    threshold_image = (Image *) NULL;
+  }
   if (is_grayscale)
-    {
-      threshold_image->is_monochrome=MagickTrue;
-      threshold_image->is_grayscale=MagickTrue;
-    }
-  return(threshold_image);
+  {
+    threshold_image->is_monochrome = MagickTrue;
+    threshold_image->is_grayscale = MagickTrue;
+  }
+  return (threshold_image);
 }
+
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
